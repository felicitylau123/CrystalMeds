@page "/products/"
@using CrystalMeds.Client.Static;
@using CrystalMeds.Shared.Domain;
@using CrystalMeds.Client.Services
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.JSInterop;
@using System.Net.Http.Json;
@inject NavigationManager Navigation
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor



<h3 class="card-title">products</h3>
<a href="/products/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New product
</a>
@if (Products == null)
{
	<div class="alert alert-info">Loading products...</div>
}
else
{
	<table class="table table-responsive" id="productsTable">
		<thead>
			<tr>
				<th>Product</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var product in Products)
			{
				<tr>
					<td>@product.ProductName<br />price: $@product.ProductPrice<br />Description: @product.ProductDescription<br /></td>
				
					<td>
						<a href="/products/view/@product.ProductId" class="btn btn-primary">
							<span class="oi oi-eye"></span>
						</a>
						<a href="/products/edit/@product.ProductId" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(() => Delete(product.ProductId))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
    private List<ProductViewModel>? Products;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        var products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");

        // Convert products to ProductViewModel
        Products = products?.Select(p => new ProductViewModel
            {
                ProductId = p.ProductId,
                ProductName = p.ProductName,
                ProductPrice = p.ProductPrice,
                ProductDescription = p.ProductDescription,
                ProductCategory = p.ProductCategory,
                Quantity = 1 // Default quantity
            }).ToList() ?? new List<ProductViewModel>();
    }

    async Task Delete(int productId)
    {
        if (Products != null)
        {
            var product = Products.First(q => q.ProductId == productId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {product.ProductName}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ProductsEndpoint}/{productId}");
                await OnInitializedAsync();
            }
        }
    }




    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#productsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#productsTable");
    }
}
